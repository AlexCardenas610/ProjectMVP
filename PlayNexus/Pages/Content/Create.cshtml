@page
@model PlayNexus.Pages.Content.CreateModel
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">Create Content</h2>
                </div>
                <div class="card-body">
                    <form id="uploadForm" method="post" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="Title" class="form-label">Title</label>
                            <input type="text" id="Title" name="Title" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label for="Description" class="form-label">Description</label>
                            <textarea id="Description" name="Description" class="form-control" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="FilePath" class="form-label">Upload Video</label>
                            <input type="file" id="FilePath" name="FilePath" class="form-control" required />
                        </div>
                        <div id="uploadingText" class="text-center text-secondary mb-1" style="display:none;">Uploading ...</div>
                        <div class="progress mb-3" style="height: 16px; display: none;">
                            <div id="uploadProgress" class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Create</button>
                    </form>
                    <hr />
                    <h3>Uploaded Highlights</h3>
                    @if (Model != null && Model.HighlightsList != null && Model.HighlightsList.Any()) {
                        <div class="row row-cols-1 row-cols-md-3 g-4">
                        @foreach (var highlight in Model.HighlightsList) {
                            <div class="col d-flex align-items-stretch">
                                <div class="card mb-4 w-100">
                                    <div class="card-body">
                                        <h5 class="card-title">@highlight.Title</h5>
                                        <p class="card-text">@highlight.Description</p>
                                        <p class="card-text"><small class="text-muted">Uploaded by: @highlight.UserName</small></p>
                                        <video width="100%" height="200" controls>
                                            <source src="@Url.Content($"~/uploads/{highlight.FileName}")" type="video/mp4">
                                            Your browser does not support the video tag.
                                        </video>
                                    </div>
                                </div>
                            </div>
                        }
                        </div>
                    } else {
                        <p>No highlights uploaded yet.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const uploadForm = document.getElementById('uploadForm');
    const progressBar = document.querySelector('.progress');
    const progress = document.getElementById('uploadProgress');
    const uploadingText = document.getElementById('uploadingText');
    uploadForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(uploadForm);
        const xhr = new XMLHttpRequest();
        xhr.open('POST', window.location.pathname, true);
        xhr.upload.onprogress = function(e) {
            if (e.lengthComputable) {
                const percent = (e.loaded / e.total) * 100;
                progressBar.style.display = 'block';
                uploadingText.style.display = 'block';
                progress.style.width = percent + '%';
                progress.innerText = Math.round(percent) + '%';
            }
        };
        xhr.onload = function() {
            if (xhr.status === 200 || xhr.status === 302) {
                progress.style.width = '100%';
                progress.innerText = '100%';
                setTimeout(() => { window.location.reload(); }, 500);
            } else {
                progressBar.style.display = 'none';
                uploadingText.style.display = 'none';
                alert('Upload failed.');
            }
        };
        xhr.onerror = function() {
            progressBar.style.display = 'none';
            uploadingText.style.display = 'none';
            alert('Upload failed.');
        };
        progress.style.width = '0%';
        progress.innerText = '';
        xhr.send(formData);
    });
</script>